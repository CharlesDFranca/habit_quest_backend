// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  email     String   @unique
  alias     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  posts        Post[]
  comments     Comment[]
  postLikes    PostLike[]
  commentLikes CommentLike[]

  @@map("user")
}

model Post {
  id           String   @id
  authorId     String
  content      String
  commentCount Int      @default(0)
  likeCount    Int      @default(0)
  images       String[]
  isPinned     Boolean  @default(false)
  isPrivate    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  author   User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    PostLike[]

  @@map("post")
}

model Comment {
  id         String   @id
  authorId   String
  postId     String
  content    String
  replyCount Int
  likeCount  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  author User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes  CommentLike[]

  @@map("comment")
}

model PostLike {
  id        String   @id
  userId    String   @unique
  postId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("post_like")
}

model CommentLike {
  id        String   @id
  userId    String   @unique
  commentId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_like")
}
